#!/usr/bin/env ruby
require 'gli'
require 'rainbow'
require 'grid_runner'

include GLI::App

program_desc 'A simple CLI to manage The Grid sub processes'

subcommand_option_handling :normal
arguments :strict

# desc 'Describe some switch here'
# switch [:s,:switch]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

desc 'Describe run'
arg_name 'Describe arguments to run here'
command :run do |c|
  c.desc 'Describe a flag to run'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    if args.first == "all"
      apps = Applications.get_all
    elsif args.first
      apps = Applications.get_all.select { |a| args.include?( a[:name] ) }
    end

    puts apps.map {|a| a[:name] }
    apps.each do |a|
      fork do 
        stdout, stderr, cmd_status = Open3.capture3(a[:cmd])
        if cmd_status.success?
          puts "running: #{name}"
        end
      end
    end

    puts "run command ran"
  end
end

desc 'Describe status here'
arg_name 'Describe arguments to status here'
command :status do |c|
  c.action do |global_options,options,args|
    puts "status command ran"
  end
end

desc 'Describe list here'
arg_name 'Describe arguments to list here'
command :list do |c|
  c.action do |global_options,options,args|
    applications = Applications.get_all    
    applications.each_with_index do |app, ix|
      puts Rainbow("#{app[:name]} ").send(COLORS[ix % COLORS.length]).underline 
      puts "status: #{app[:status]}"
      puts "pid: #{app[:pid]}" if app[:status] == :running
      puts
    end

  end
end

desc 'kills selected app'
arg_name 'provide an app name'
command :kill do |c|
  c.action do |global_options,options,args|
    if args.first == "all"
      apps = Applications.get_all
    elsif args.first
      apps = Applications.get_all.select { |a| args.include?( a[:name] ) }
    end
    
    apps.each do |app|
      puts "No app with that name found" and return unless app
      puts Rainbow("#{app[:name]} ").send(COLORS.shuffle.first) 
      puts "status: #{app[:status]}"
      # puts "pid: #{app[:pid]}"
      if app[:status] == :running
        Process.kill("HUP", app[:pid].to_i)
        puts "kilt #{app[:name]}"
      end
    end

    puts
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
