#!/usr/bin/env ruby
require 'gli'
require 'rainbow'
require 'grid_runner'

include GLI::App

program_desc 'A simple CLI to manage The Grid sub processes'

subcommand_option_handling :normal
arguments :strict


def apps_from_args(args)
  return App.all if args.first == "all"
  return App.find(args) unless args.empty?
end

desc 'lists apps that are running'
command :running do |c|
  c.action do |global_options,options,args|
    running_apps = App.all.select { |a| a.status == :running}
    if running_apps.empty?
      puts Rainbow("No apps running").red
    else
      puts Rainbow("Running apps:").blue
      puts Rainbow("#{running_apps.map(&:name)}").green
    end
  end
end


desc 'lists apps that are not running'
command :not_running do |c|
  c.action do |global_options,options,args|
    not_running = App.all.reject { |a| a.status == :running}
    puts Rainbow("All apps running").red and return if not_running.empty?
    if not_running.empty?
      puts Rainbow("All apps running").red
    else
      puts Rainbow("Not running:").red.underline.bright
      puts Rainbow("#{not_running.map(&:name).join(", ")}").red
    end
  end
end



desc 'runs a given app listed in the Procfile (or all)'
arg_name "app names separated by a SPACE or 'all'" 
command :run do |c|
  c.action do |global_options,options,args|
    apps_to_run = apps_from_args(args) || App.all
    if apps_to_run.empty? 
      Rainbow("No app #{args.first} found in Procfile")
    else
      apps_to_run.each do |app|
        if app.status == :running
          puts Rainbow("#{app.name} already running!").red
          puts 
        else
          app.run
        end
      end
    end
  end
end

desc 'restarts a given app'
arg_name "app names separated by a SPACE or 'all'" 
command :restart do |c|
  c.action do |global_options,options,args|
    colors = COLORS.shuffle
    apps_from_args(args).each do |app|
      begin
        if app.status == :running
          Process.kill("HUP", app.pid.to_i)
          puts "kilt #{app.name}"
        end
        app.display
      ensure
        app.run
      end
    end

    puts "restart command ran"
  end
end

desc 'prints the status of apps listed in Procfile'
arg_name "app names separated by a SPACE or 'all'" 
command [:list, :status] do |c|
  c.action do |global_options,options,args|
    apps = apps_from_args(args) || App.all
    apps.each_with_index do |app, ix|
      app.display(ix)
    end
  end
end


desc 'watches logs for given apps and prints changes'
arg_name "app names separated by a SPACE or 'all'" 
command :log do |c|
  c.action do |global_options,options,args|
    apps = apps_from_args(args) || App.all
    puts
    puts Rainbow("Logging:").blue.underline #{apps.map(&:name).join(", ")}"
    puts Rainbow("#{apps.map(&:name).join(', ')}").green
    app_logs = apps.flat_map(&:log).flat_map(&:path).join(" ")
    IO.popen("tail -f #{app_logs}") { |io| while (line = io.gets) do puts line end }  end
end

desc 'kills selected app'
arg_name 'provide an app name'
command :kill do |c|
  c.action do |global_options,options,args|
    apps_from_args(args).each do |app|
      puts "No app with that name found" and return unless app
      app.display
      app.kill!
    end
    puts
  end
end

exit run(ARGV)
